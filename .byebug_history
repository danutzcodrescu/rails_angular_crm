exit
constraints
constrained
exit
criteria
exit
statementCreator
exit
constraints
keywords
continue
keywords
exit
criteria[1]
criteria[0]
continue
criteria
exit
criteria[2]
continue
strings
continue
exit
criteria
continue
returned[2]
returned=[criteria, placeholder, constrained, placeholderConstraint]
constraints==nil
continue
constraints==nil
continue
exit
criteria
continue
exit
criteria[2]
criteria
criterua
continue
constraints
constrained
criteria
continue
exit
criteria
continue
constrained
continue
value
continue
criteria
continue
value
exit
criteria
continue
criteria
continue
exit
criteria[1]
criteria[0]
criteria
continue
exit
criteria
continue
criteria
continue
criteria
exit
criteria
continue
if (key==:keywords) then  puts true end
if (key==:keywords) puts true end
if (key==:keywords) {puts true}
key
continue
exit
criteria
continue
criteria="#{criteria[4..-1]}#{criteria[0..3]}"
placeholder
criteria
exit
values["constrainKeywords"]
exit
continue
exit
continue
exit
continue
exit
keywords
continue
values['keywords']
continue
keywords
continue
placeholder
criteria
exit
values['keywords'][0]
values['keywords']
object=JSON.parse(values['constraints'], {:symbolize_names=>true})
values['constraints'].is_a?(String)
values['constraints']["last_name"]
values['constraints'].is_a?(Object)
values['constraints'].is_a(Object)
values['constraints']
                        .where(criteria[0], criteria[1])).limit(values["limit"]).offset(values["offset"]);continue
                        .where(id:Object.const_get(model(values["controller"])).select("id")
 @result=Object.const_get(model(values["controller"]))
criteria[2] += "ID IN (#{@strings})"
criteria[2]
constrain[2]
continue
criteria[3]
criteria[3][:ids]=@strings
criteria[3]
criteria[2]
constrain[2]
exit
values['constraints'].each {|keys, values| }
values['constraints'].each {|keys, values| puts values}
values['constraints']
exit
where[1][:first_name0]
where[1]
where[2]
continue
constrained
values['constraints']
placeholderConstraint
exit
values['constraints'].each {|key, value| puts value}
values['constraints'].is_a?(Object)
values['constraints'].is_a?(String)
values['constraints'].each {|value| puts value}
 values['constraints']=JSON.parse(values['constraints'], {:symbolize_names=>true})
values['constraints']=JSON.parse(values['constraints'], {:symbolize_names=>true})
values['constraints']
placeholderConstraint
 constrained=constrained.slice(0, constrained.length-5)
constrained=constrained.slice(0, criteria.length-5)
constrained
exit
where[3]
where[2]
continue
criteria
continue
exit
values["constraints"][:last_name]
values["last_name"]
values[:last_name]
values['constraints']=JSON.parse(values['constraints'], {:symbolize_names=>true})
values["constraints"]["last_name"]
alues["constraints"]["last_name"]
values["constraints"].is_a?(String)
values["constraints"].is_a?(Array)
values["constraints"].is_a?(Object)
values["constraints"]
exit
strings
exit
criteria
continue
criteria[1]
continue
where[1]
continue
placeholder
where[1]
continue
placeholder
where[1]
continue
coninue
continue
criteria
criteia
continue
placeholder
criteria
continue
placeholder
criteria
continue
criteria[0]
criteria
exit
values['keywords'][1]
values['keywords'][0]
values['keywords']
continue
values
continue
values['keywords'].kind_of?(Object)
values.['keywords'].kind_of?(Object)
values['keywords'].kind_of?(Array)
values['keywords']
values.keywords
values.keywods
values
continue
criteria[1].join(',')
criteria
continue
criteria
continue
placeholder
continue
where[0]
 placeholder
placheloder
continue
criteria
continue
criteria
continue
criteria
continue
criteria
placeholder
continue
Contact.where(first_name:"Bella")
Contact.where(first_name:s)
Contact.where(first_name=s)
Contact.where(first_name=s
value[0]
s.kind_of?(Array)
s=value[0].split(",")
continue
value
continue
value
continue
value
continue
value
continue
value
continue
value
value.kind_of?(Array)
continue
value.kind_of?(Array)
value.kind_of(Array)
type(key)
key.kind_of?
key.kind_of?(Array)
key.s.kind_of?(Array)
continue
criteria[0]
continue
criteria
